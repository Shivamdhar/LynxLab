AWSTemplateFormatVersion: '2010-09-09'
Description: Scenario 1 - Overly permissive role on a demo Lambda (for validation/remediation practice).
Parameters:
  EnableFullIamWildcard:
    Type: String
    AllowedValues: ['true','false']
    Default: 'false'
Conditions:
  UseFullWildcard: !Equals [ !Ref EnableFullIamWildcard, 'true' ]
Resources:
  VulnLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lab-vuln-lambda-role-cfn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  OverlyPermissivePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lab-overly-permissive-policy-cfn
      Roles: [ !Ref VulnLambdaRole ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: !If
              - UseFullWildcard
              - ['s3:*','iam:*']
              - ['s3:*','iam:PassRole','iam:List*','iam:Get*']
            Resource: "*"
  NoopFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-vuln-iam-noop-cfn
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt VulnLambdaRole.Arn
      Timeout: 5
      Code:
        ZipFile: |
          def handler(event, context):
              return {"ok": True, "received": event}
Outputs:
  LambdaRoleArn: { Value: !GetAtt VulnLambdaRole.Arn }
  LambdaFunctionName: { Value: !Ref NoopFunction }
